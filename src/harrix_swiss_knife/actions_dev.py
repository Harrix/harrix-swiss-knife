import harrix_pylib as h
from PySide6.QtWidgets import QApplication

from harrix_swiss_knife import action_base
from harrix_swiss_knife import toast_countdown_notification

config = h.dev.load_config("config/config.json")


class on_exit(action_base.ActionBase):
    icon: str = "√ó"
    title: str = "Exit"

    def __init__(self, **kwargs):
        self.parent = kwargs.get("parent", None)

    def execute(self, *args, **kwargs):
        QApplication.quit()


class on_get_menu(action_base.ActionBase):
    icon: str = "‚ò∞"
    title: str = "Get the list of items from this menu"

    def __init__(self, **kwargs):
        self.parent = kwargs.get("parent", None)

    def execute(self, *args, **kwargs):
        result = self.parent.get_menu()
        self.add_line(result)
        self.show_text_textarea(result)


class on_npm_install_packages(action_base.ActionBase):
    icon: str = "üì•"
    title: str = "Install global NPM packages"
    is_show_output = True

    def execute(self, *args, **kwargs):
        commands = "\n".join([f"npm i -g {package}" for package in config["npm_packages"]])
        output = h.dev.run_powershell_script(commands)
        self.add_line(output)


from PySide6.QtCore import Signal, QThread

# class on_npm_update_packages(action_base.ActionBase):
#     icon: str = "üì•"
#     title: str = "Update NPM and global NPM packages"

#     def execute(self, *args, **kwargs):
#         self.show_toast("‚ùóThe process is not fast", duration=5000)
#         commands = "npm update npm -g\nnpm update -g"
#         result = h.dev.run_powershell_script(commands)
#         self.show_toast("Update completed")
#         self.show_text_textarea(result)


from PySide6.QtCore import Slot

class on_npm_update_packages(action_base.ActionBase):
    icon: str = "üì•"
    title: str = "Update NPM and global NPM packages"

    def execute(self, *args, **kwargs):
        # –°–æ–∑–¥–∞—ë–º "—Ç–æ—Å—Ç" —Å–æ —Å—á—ë—Ç—á–∏–∫–æ–º
        self.toast = toast_countdown_notification.ToastCountdownNotification("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ NPM –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
        self.toast.show()
        self.toast.start_countdown()

        # –ì–æ—Ç–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã
        commands = "npm update npm -g\nnpm update -g"

        # –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫-–≤–æ—Ä–∫–µ—Ä
        class Worker(QThread):
            finished = Signal(str)  # –°–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–∏–ø—Ç–∞

            def __init__(self, commands: str, parent=None):
                super().__init__(parent)
                self.commands = commands

            def run(self):
                # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                result = h.dev.run_powershell_script(self.commands)
                # –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —à–ª—ë–º —Å–∏–≥–Ω–∞–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                self.finished.emit(result)

        self.worker = Worker(commands)
        # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –º–µ—Ç–æ–¥
        self.worker.finished.connect(self.on_update_finished)
        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫
        self.worker.start()

    @Slot(str)
    def on_update_finished(self, result: str):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ NPM."""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—Ç–æ—Å—Ç"-—Å–µ–∫—É–Ω–¥–æ–º–µ—Ä
        self.toast.close()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ—Å—Ç (–Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É) —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        self.show_toast("Update completed", duration=2000)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
        self.show_text_textarea(result)
        self.add_line(result)


class on_open_config_json(action_base.ActionBase):
    icon: str = "‚öôÔ∏è"
    title: str = "Open config.json"

    def execute(self, *args, **kwargs):
        commands = f"{config['editor']} {h.dev.get_project_root() / 'config/config.json'}"
        output = h.dev.run_powershell_script(commands)
        self.add_line(output)
